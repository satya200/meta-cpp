URL:
-----

https://www.youtube.com/watch?v=LZFoktwiars&list=PL0gIV7t6l2iIsR55zsSgeiOw9Bd_IUTbY

Topic Cover:
-------------

https://www.youtube.com/watch?v=pX6LufLso2M&list=PL0gIV7t6l2iIsR55zsSgeiOw9Bd_IUTbY&index=10

https://www.youtube.com/watch?v=6ki_W7cXdM0&list=PL0gIV7t6l2iIsR55zsSgeiOw9Bd_IUTbY&index=22

https://www.youtube.com/watch?v=wtuks_f3vP4&list=PL0gIV7t6l2iIsR55zsSgeiOw9Bd_IUTbY&index=24

https://www.youtube.com/watch?v=jXTTOZUT1iU&list=PL0gIV7t6l2iIsR55zsSgeiOw9Bd_IUTbY&index=27

https://www.youtube.com/watch?v=apdzg2A90CI&list=PL0gIV7t6l2iIsR55zsSgeiOw9Bd_IUTbY&index=30

https://www.youtube.com/watch?v=gh51t49tKUQ&list=PL0gIV7t6l2iIsR55zsSgeiOw9Bd_IUTbY&index=33

lecture goibg to start: 9, 10, 12, 14, 16, 21, 23, 25, 29, 32

//////////////////////////////////////////////////////////////////////////////////////////

Define vector
--------------
	#define MAX 10
	vector<int> arr(MAX) : int -> Type of array. arr --> Name of array  MAX --> Size of array define as a macro

1> Diff between array and vector?
Array size is fixed and decide at compile time. But vector size is not fixed size it can be change with "arr.resize(20)".

2> Inline function can not be recursive.

Reference:
-----------
1> This is the alias of a variable.
	int a = 10;	Below Both the case a and b address is same.
	int &b = a;

	int &c; => Error becz there is no varibale for alias.

2> int &j = 6 ==> Error becz we can not refer to constant But we can refer to const int &j = 6

3> int &j = i + j ===> Error above resons const int &j = i + j

4> NEVER EVER RETURN LOCAL VARIABLE REFERENCE.

Default Paramter and Function Overloading:
-------------------------------------------
1> If we are not pasing any parameter at the time of call system will take default value mention in function declaration.

2> i> All the parameter right of default parameter should be defaulted.
	Ex: void foo(int, double = 1, char *) // Error becz char * shuld be defaulted
	    void foo(int, double = 1, char * = NULL) //OK
   ii> Default argument can not be redefind.
	Ex: void foo(int, double = 1, char * = NULL) //OK
	    void foo(int, double = 2, char * = NULL) //Error redefind
   iii> All non-default parameter should mention at the time of function call.

3> Always use default parameter in headerfile.

4> Function Overloading is called static Polymerprisim

5> Function Binding happen at compile time in function Overloading.

6> In Function Overloading different return type in overloading function is not possible.

Operator Overloading:
----------------------
1> Example: a + b  ===> operator+(a, b) ==> This defination type always user define not int, char, double etc
	    c = a + b ===> operator= (c, operator+(a, b))

2> New operator symbol can not be oveload. Only existing opeartor can overload.

3> prefix operator Mytype& operator++(Mytype& s1)
   postfix operator Mytype& operator++(Mytype& s1, int) ===> No need to pass any parameter in int place. this use to identyfy compiler.

4> ::, ., *, sizeof, ternary can not be overloaded

5> -> this overloading should return pointer. LATER WILL DISCUSS IN SMART POINTER

Dynamic Memory Allocation:
---------------------------
1> int *p = new int (5) ==> Here new will allocate memory and initialize 5 to particular "p"\
	If we don't want initilization only "int *p = new int" is sufficient.

2> new and delete are operator. malloc is function.

3> Array memory allocation: int *a = new int [3]; delete [] a;

4> If we try to overload operator new below is the defination need to be follow.
	void *operator new(size_t n)
	{
		--------
	}
Class and Object:
------------------
1> Object is the instances of class.

Access Specifier:
------------------
1> This is use for hiding information. This is very strong concept in cpp.

2> Default class datamembers are private.

3> public is use for interface and private is use for implementation.

4> Mostly ".h" file is called interface and every body needs to be known. Implementation will go in different file .cpp. And application only use ".h" file which is called interface.

Constructure, Destructure:
---------------------------
1> Object come to life fom execution of constructer body and destroy from destoctor sequnce.

Copy Constructure:
------------------

1> Data members initialization happen according to the order it define inside class not the order it intialize in constructure.

2> PLEASE NOTE ABOVE CONDITION BECZ IT WILL VERY HELPFUL FOR OUTPUT. SO MAIN RULE IS ORDER OF DATA MEMEBR PRESENT INSIDE CLASS AND AT THE TIME OF INITILIZATION IN CONSTRUCTURE ORDER SHOULD BE SAME. 

3> For more info check sample program file name "const_order.cpp"

4> And the Destructure order is equaly opposite order.

5> Syntax of Copy constructure: Complex:: Complex(const Complex &)

6> Invokation Of Copy Constructure: c2(c1) or c3 = c2;

7> Why Copy Constructure Required?
   i> At the time of user define(class created by user) call-by-value this is required becz we can't pass value without copy.
   ii> 

8> We can not pass object as call-by-value in copy constructure.

9> Copy Assignment Operator ==> This required when 2 or more than objects are already define
	syntax: invoking c2 = c3;
	Defination: Complex& operator=(const Complex& c)
	{
		if (this != &c)
		{
			free(c); // This is required for avoide memory leak. becz c will not frred up once this function returnd.
			// Procede now becz this condition will help for self assignmate object. Ex c1 = c1;
		}
		-------------
	}
	Why need & at the time of return? Because chain assignment is possible c1 = c2 = c3.

10> If user does not provide copy consructure compile will provide free copy constructure. And it is just bit copy. Always advise to provide copy consructure. 

11> SHALLOW COPY COPIES THE POINTER BUT DEEP COPY ONLY COPY POINTED VALUE.

Const-ness:
-----------
1> User define object can be mention as const. If we make this const the member of object can not be change.
	Ex:- const Myclass * const this; ==> Const pointer to const object
	     Myclass * const this; =====> Const pointer to Non-constant object

2> To access member using const object we need to provide const member functions.
	Ex:- void print() const
	     {
		--------------
	     }

3> If datamembers are const it can not change at all. The value is assign at the time of initialization.

4> mutable(It means it can change) is use if object is declare as const in that case only mutable data member can change but all other data member can not be change.

5> mutable is only applicable for data member not variable.

6> Reference data member can not be declare as mutable.

7> static and const data member can not be declare as mutable.

8> Syntax: class x {
			mutable int a;
		};

Static Members:
----------------
1> static data member is only created one and share commonly all instances.

2>static data member is constructed before main() function starts and destructed after main () ends.

3> static member function:
	i> Does not have this pointer.
	ii> can not access non-static data members.
	iii> can not invoke non-static memberfunction.
	iv> it will access using class name :: operator.
	v> Can not declare as const becz it does not have this pointer.

4> 
