URL:
-----

https://www.youtube.com/watch?v=LZFoktwiars&list=PL0gIV7t6l2iIsR55zsSgeiOw9Bd_IUTbY

Topic Cover:
-------------

https://www.youtube.com/watch?v=pX6LufLso2M&list=PL0gIV7t6l2iIsR55zsSgeiOw9Bd_IUTbY&index=10

https://www.youtube.com/watch?v=GtsBZ5e1-cE&list=PL0gIV7t6l2iIsR55zsSgeiOw9Bd_IUTbY&index=12

https://www.youtube.com/watch?v=N4gpIkQKUbc&list=PL0gIV7t6l2iIsR55zsSgeiOw9Bd_IUTbY&index=15

https://www.youtube.com/watch?v=lkFK2X6qIc0&list=PL0gIV7t6l2iIsR55zsSgeiOw9Bd_IUTbY&index=18

https://www.youtube.com/watch?v=6ki_W7cXdM0&list=PL0gIV7t6l2iIsR55zsSgeiOw9Bd_IUTbY&index=22

lecture goibg to start: 9, 10, 12, 14, 16, 21, 

//////////////////////////////////////////////////////////////////////////////////////////

Define vector
--------------
	#define MAX 10
	vector<int> arr(MAX) : int -> Type of array. arr --> Name of array  MAX --> Size of array define as a macro

1> Diff between array and vector?
Array size is fixed and decide at compile time. But vector size is not fixed size it can be change with "arr.resize(20)".

2> Inline function can not be recursive.

Reference:
-----------
1> This is the alias of a variable.
	int a = 10;	Below Both the case a and b address is same.
	int &b = a;

	int &c; => Error becz there is no varibale for alias.

2> int &j = 6 ==> Error becz we can not refer to constant But we can refer to const int &j = 6

3> int &j = i + j ===> Error above resons const int &j = i + j

4> NEVER EVER RETURN LOCAL VARIABLE REFERENCE.

Default Paramter and Function Overloading:
-------------------------------------------
1> If we are not pasing any parameter at the time of call system will take default value mention in function declaration.

2> i> All the parameter right of default parameter should be defaulted.
	Ex: void foo(int, double = 1, char *) // Error becz char * shuld be defaulted
	    void foo(int, double = 1, char * = NULL) //OK
   ii> Default argument can not be redefind.
	Ex: void foo(int, double = 1, char * = NULL) //OK
	    void foo(int, double = 2, char * = NULL) //Error redefind
   iii> All non-default parameter should mention at the time of function call.

3> Always use default parameter in headerfile.

4> Function Overloading is called static Polymerprisim

5> Function Binding happen at compile time in function Overloading.

6> In Function Overloading different return type in overloading function is not possible.

Operator Overloading:
----------------------
1> Example: a + b  ===> operator+(a, b) ==> This defination type always user define not int, char, double etc
	    c = a + b ===> operator= (c, operator+(a, b))

2> New operator symbol can not be oveload. Only existing opeartor can overload.

3> prefix operator Mytype& operator++(Mytype& s1)
   postfix operator Mytype& operator++(Mytype& s1, int) ===> No need to pass any parameter in int place. this use to identyfy compiler.

4> ::, ., *, sizeof, ternary can not be overloaded

5> -> this overloading should return pointer. LATER WILL DISCUSS IN SMART POINTER

Dynamic Memory Allocation:
---------------------------
1> int *p = new int (5) ==> Here new will allocate memory and initialize 5 to particular "p"\
	If we don't want initilization only "int *p = new int" is sufficient.

2> new and delete are operator. malloc is function.

3> Array memory allocation: int *a = new int [3]; delete [] a;

4> If we try to overload operator new below is the defination need to be follow.
	void *operator new(size_t n)
	{
		--------
	}
Class and Object:
------------------
1> Object is the instances of class.




